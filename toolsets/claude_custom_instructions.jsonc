{
  // Custom Claude Code instructions for sub-agent and gate orchestration
  "subAgents": {
    "DataAgent": {
      "description": "Manages data schema, migrations, ETL validity",
      "prompts": [
        "Step 1: Identify affected tables and fields",
        "Step 2: Validate current schema against expected models",
        "Step 3: Generate migration scripts with SQL and Drizzle ORM",
        "Step 4: Create anomaly detection tests for new schema"
      ]
    },
    "AuthAgent": {
      "description": "Orchestrates Stack Auth flows and session management",
      "prompts": [
        "Step 1: Validate route parameters and session tokens",
        "Step 2: Ensure proper cookie handling and security flags",
        "Step 3: Generate comprehensive integration tests for sign-in, sign-out",
        "Step 4: Implement circuit-breaker patterns for fallback"
      ]
    },
    "QAAgent": {
      "description": "Automates test generation with sequential chain of thought",
      "prompts": [
        "Step 1: Outline test cases based on feature specification",
        "Step 2: Write unit and integration tests using Vitest",
        "Step 3: Execute tests and capture PoW evidence",
        "Step 4: Update claude.md with test fingerprints"
      ]
    },
    "DeploymentAgent": {
      "description": "Manages CI/CD, self-healing rollbacks, and health-check triggers",
      "prompts": [
        "Step 1: Configure GitHub Actions workflows",
        "Step 2: Implement build and deployment pipelines in Vercel",
        "Step 3: Create health-check endpoints and rollback logic",
        "Step 4: Generate monitoring alerts for failures"
      ]
    }
  },
  "gateCriteria": {
    "Phase0": ["Audit report generated","Data flow map approved"],
    "Phase1": ["Auth tests pass","Routing tests pass"],
    "Phase2": ["CI pass","Coverage â‰¥ 90%"],
    "Phase3": ["RBAC tests pass","Security audit complete"],
    "Phase4": ["Self-healing validated","Automated alerts configured"],
    "Phase5": ["Stakeholder sign-off","Monetization plan approved"],
    "Phase6": ["All docs published","Compliance audit passed"],
    "Phase7": ["Demo of RAG engine","Templating validated"]
  }
  ,
  // Additional sub-agents for comprehensive coverage
  "additionalSubAgents": {
    "SecurityAgent": {
      "description": "Manages security audits, vulnerability scanning, and compliance",
      "prompts": [
        "Step 1: Run automated security scans (OWASP, dependency check)",
        "Step 2: Review authentication and authorization patterns",
        "Step 3: Verify data encryption at rest and in transit",
        "Step 4: Generate security compliance report"
      ]
    },
    "PerformanceAgent": {
      "description": "Optimizes system performance and monitors metrics",
      "prompts": [
        "Step 1: Profile application performance bottlenecks",
        "Step 2: Implement caching strategies",
        "Step 3: Optimize database queries and indexes",
        "Step 4: Set up performance monitoring dashboards"
      ]
    },
    "IntegrationAgent": {
      "description": "Manages external service integrations and APIs",
      "prompts": [
        "Step 1: Document all external API dependencies",
        "Step 2: Implement webhook handlers with validation",
        "Step 3: Create integration test suites",
        "Step 4: Set up monitoring for external services"
      ]
    }
  },
  // Prompt templates for each development phase
  "phasePrompts": {
    "Phase0": {
      "title": "Discovery & Audit",
      "prompt": [
        "You are DataAgent. Follow these steps:",
        "1. Inventory all dependencies from package.json; identify outdated or vulnerable packages.",
        "2. Generate an npm audit report (npm audit --json) and parse critical issues.",
        "3. Extract API routes and map data flows for User, Admin, and Super Admin journeys.",
        "4. Document each data exchange event in JSON.",
        "5. Provide a summary of findings with high-level risks and recommendations."
      ],
      "chainOfThought": true
    },
    "Phase1": {
      "title": "Core Platform Stabilization",
      "prompt": [
        "You are AuthAgent. Execute these tasks:",
        "1. Validate the Stack Auth route handler implementation in app/handler/[...stack]/route.ts.",
        "2. Write Playwright test scenarios for sign-in, sign-out flows.",
        "3. Ensure middleware.ts invokes stackServerApp.getUser() on protected routes.",
        "4. Audit logAccess calls for Admin and Super-Admin paths.",
        "5. Summarize code validation results and update claude.md Gate 1 status."
      ],
      "chainOfThought": true
    },
    "Phase2": {
      "title": "Automation & Sub-Agent Integration",
      "prompt": [
        "You are QAAgent. Follow these steps:",
        "1. Generate Vitest unit tests for each function in lib/ai/tools using chain-of-thought.",
        "2. Create integration tests for API endpoints with Supertest.",
        "3. Write a script to run pnpm validate (lint, test, validate-pow) in CI context.",
        "4. Produce a report of coverage metrics and test failures.",
        "5. Update claude.md Gate 2 status."
      ],
      "chainOfThought": false
    },
    "Phase3": {
      "title": "Admin & Super Admin Profile Completion",
      "prompt": [
        "You are DataAgent. Proceed sequentially:",
        "1. Define TypeScript types for AdminUser and SuperAdminSummary.",
        "2. Implement GET /api/admin/profile endpoint with pagination.",
        "3. Implement GET /api/super-admin/profile endpoint aggregating all tenants.",
        "4. Write RBAC tests under tests/rbac/.",
        "5. Document API contracts in docs/openapi.json."
      ],
      "chainOfThought": true
    },
    "Phase4": {
      "title": "Self-Healing & Continuous Validation",
      "prompt": [
        "You are DeploymentAgent. Perform these tasks:",
        "1. Enhance validate-pow.js to verify Deliverables list in claude.md.",
        "2. Create scripts/check-pipeline-metrics.ts for CI anomaly detection.",
        "3. Implement automatic rollback logic on PoW failures.",
        "4. Write tests to simulate rollback scenarios.",
        "5. Mark Gate 4 status in claude.md."
      ],
      "chainOfThought": false
    },
    "Phase5": {
      "title": "Final Roadmap & Monetization Blueprint",
      "prompt": [
        "You are DataAgent. Execute:",
        "1. Compile a spreadsheet of feature ROI and subscription tiers.",
        "2. Draft monetization proposal in docs/monetization-analysis.xlsx.",
        "3. Summarize business sign-off action items.",
        "4. Update claude.md Gate 5 status."
      ],
      "chainOfThought": false
    },
    "Phase6": {
      "title": "Go-To-Market & Documentation",
      "prompt": [
        "You are QAAgent. Follow:",
        "1. Generate docs/user-guide.md and docs/api-reference.md from code comments.",
        "2. Run Snyk to produce docs/security-report.md.",
        "3. Create markdown TOC for user guides.",
        "4. Update claude.md Gate 6 status."
      ],
      "chainOfThought": false
    },
    "Phase7": {
      "title": "Optional RAG Refactoring",
      "prompt": [
        "You are AuthAgent. Steps:",
        "1. Strip benefit-specific functions from lib/ai/tools.",
        "2. Scaffold templates/rag-chatbot boilerplate.",
        "3. Write generator CLI in lib/templates/generator.ts.",
        "4. Test example in examples/simple-chatbot/.",
        "5. Update claude.md Gate 7 status."
      ],
      "chainOfThought": true
    },
    "Phase1_Security": {
      "title": "Security & Auth Stabilization",
      "prompt": [
        "You are SecurityAgent. Critical tasks:",
        "1. Fix all unauthenticated endpoints immediately",
        "2. Add withAuth middleware to all admin routes",
        "3. Verify Stack Auth environment configuration matches across all environments",
        "4. Update all vulnerable dependencies to latest secure versions",
        "5. Run security audit and verify zero critical vulnerabilities"
      ],
      "chainOfThought": true
    },
    "Phase2_RAG": {
      "title": "RAG System Implementation",
      "prompt": [
        "You are DataAgent with IntegrationAgent. Execute:",
        "1. Implement complete document processing pipeline with chunking",
        "2. Integrate Pinecone vector database with proper namespacing",
        "3. Create searchKnowledge AI tool with citation support",
        "4. Test RAG accuracy with sample documents",
        "5. Ensure multi-tenant document isolation"
      ],
      "chainOfThought": true
    },
    "Phase3_Testing": {
      "title": "Comprehensive Testing Implementation",
      "prompt": [
        "You are QAAgent. Implement testing strategy:",
        "1. Create unit tests for all critical functions (80% coverage minimum)",
        "2. Write integration tests for all API endpoints",
        "3. Implement E2E tests for user journeys with Playwright",
        "4. Add performance tests with k6 for load testing",
        "5. Create test data factories and fixtures"
      ],
      "chainOfThought": true
    },
    "Phase5_Performance": {
      "title": "Performance Optimization",
      "prompt": [
        "You are PerformanceAgent. Optimize system:",
        "1. Implement Redis caching for session and query cache",
        "2. Optimize all database queries with proper indexes",
        "3. Configure CDN for static assets",
        "4. Implement response streaming for AI chat",
        "5. Achieve < 200ms API response time (p95)"
      ],
      "chainOfThought": true
    },
    "Phase6_Compliance": {
      "title": "Compliance & Security Audit",
      "prompt": [
        "You are SecurityAgent. Ensure compliance:",
        "1. Verify HIPAA compliance with encryption and access controls",
        "2. Implement SOC 2 controls and documentation",
        "3. Add GDPR/CCPA privacy controls and consent management",
        "4. Conduct penetration testing and fix vulnerabilities",
        "5. Create compliance documentation and policies"
      ],
      "chainOfThought": true
    }
  },
  // Validation rules for phase completion
  "phaseValidation": {
    "Phase0": {
      "required": ["audit_report", "vulnerability_list", "technical_debt_doc"],
      "blockers": ["unauthenticated_endpoints", "critical_vulnerabilities"]
    },
    "Phase1": {
      "required": ["auth_tests_passing", "no_vulnerabilities", "api_protection"],
      "blockers": ["auth_failures", "security_gaps"]
    },
    "Phase2": {
      "required": ["rag_functional", "benefits_complete", "test_coverage_60"],
      "blockers": ["ai_search_broken", "enrollment_failures"]
    },
    "Phase3": {
      "required": ["test_coverage_80", "e2e_tests", "performance_tests"],
      "blockers": ["failing_tests", "coverage_below_80"]
    },
    "Phase4": {
      "required": ["enterprise_features", "billing_system", "white_label"],
      "blockers": ["integration_failures", "billing_errors"]
    },
    "Phase5": {
      "required": ["performance_targets_met", "monitoring_active", "caching_implemented"],
      "blockers": ["slow_response_times", "no_monitoring"]
    },
    "Phase6": {
      "required": ["security_audit_passed", "compliance_verified", "policies_documented"],
      "blockers": ["security_vulnerabilities", "compliance_gaps"]
    },
    "Phase7": {
      "required": ["production_deployed", "documentation_complete", "support_ready"],
      "blockers": ["deployment_failures", "missing_docs"]
    }
  }
}
